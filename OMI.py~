"""
#***********************************************************************#
# Copyright (C) 2014 Prabod Rathnayaka									#
# This file is part of OMI-The Game.									#
#																		#
# OMI-The Game is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or     #
# any later version.													#
#																		#
# OMI-The Game is distributed in the hope that it will be useful,		#
# but WITHOUT ANY WARRANTY; without even the implied warranty of		#
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the			#
# GNU General Public License for more details.							#
#																		#
# You should have received a copy of the GNU General Public License		#
#***********************************************************************#

"""


#Imports
import math
import random

from Tkinter import *
from Canvas import Rectangle, CanvasText, Group, Window

#########################################################################
class Cards:
	"""

	Class that used to Shuffle cards,Divide cards among four players,and 
	card Drawing instuctions to cpu players.

	"""
	def __init__(self):
		self.CardDeck = range(1,33) #Saves the card deck into a list
		self.Dummy=[0,0,0,0] # dummy for choose fovourite
		
		
	def DivideRound1(self,player1,player2,player3,player4):
		random.shuffle(self.CardDeck) #shuffle the cards
		
		for i in range(4):
			player1.append(self.CardDeck[i])  #Four Cards to Player1
		
		for i in range(4,8):
			player2.append(self.CardDeck[i])  #Four Cards to Player2
		
		for i in range(8,12):
			player3.append(self.CardDeck[i])  #Four Cards to Player3
		
		for i in range(12,16):
			player4.append(self.CardDeck[i])  #Four Cards to Player4
	
	def DivideRound2(self,player1,player2,player3,player4):		
		for i in range(16,20):
			player1.append(self.CardDeck[i])  #Four Cards to Player1
		
		for i in range(20,24):
			player2.append(self.CardDeck[i])  #Four Cards to Player2
		
		for i in range(24,28):
			player3.append(self.CardDeck[i])  #Four Cards to Player3
		
		for i in range(28,32):
			player4.append(self.CardDeck[i])  #Four Cards to Player4	
				
	def Favourite(self,playerX): #Choosing Favourite
		for i in range(4):
			if playerX[i]//8==0:
				self.Dummy[0]+=playerX[i]%8 
			
			if playerX[i]//8==1:
				if playerX[i]%8 == 0:
					self.Dummy[0]+=8
				else:
					self.Dummy[1]+=playerX[i]%8
				
			if playerX[i]//8==2:
				if playerX[i]%8 == 0:
					self.Dummy[1]+=8
				else:
					self.Dummy[2]+=playerX[i]%8
				
			if playerX[i]//8==3:
				if playerX[i]%8 == 0:
					self.Dummy[2]+=8
				else:
					self.Dummy[3]+=playerX[i]%8
			
		return self.Dummy.index(max(self.Dummy))
			
##########################################################################

playerX=[4,11,22,32]
ca=Cards()
print ca.Favourite(playerX)
